RK_INC += -I../../../../implementation/no_interface/rumpbooter -I../../../../include -I../../../../../kernel/include/shared -I./include/
RK_CFLAGS += -O3 -m32 -c $(RK_INC)
RK_LDFLAGS = -melf_i386 -r -o
RK_APPTOOLS = $(shell pwd)/../../rumprun/app-tools/
RK_CC = $(RK_APPTOOLS)/i486-rumprun-netbsdelf-gcc
RK_LD = $(RK_APPTOOLS)/i486-rumprun-netbsdelf-ld
RK_BAKE = $(RK_APPTOOLS)/rumpbake
RK_RUN = $(RK_APPTOOLS)/rumprun

# Provided by the individual application
RK_SRC ?=
RK_APP ?= rk_stub
RK_LIBS ?= cos
RK_DEPS ?=


all: $(RK_APP).bin

$(RK_APP).bin: $(RK_APP).out
	$(RK_BAKE) $(RK_LIBS) $(RK_APP).bin $(RK_APP).out

$(RK_APP).out : $(RK_APP).o
	$(RK_LD) $(RK_LDFLAGS) $(RK_APP).out *.o $(RK_DEPS)

$(RK_APP).o : $(RK_SRC)
	# since we are just compiling we need to manually get the recipe.s file from app-tools
	# the app-tools/bake script looks for it.
	# This is kinda an out of place command. It uses the host computer's gcc
	# TODO, use composite toolchain gcc
	gcc -m32 -O3 -c -o recipe.o $(RK_APPTOOLS)/i486-rumprun-netbsdelf-recipe.s
	$(RK_CC) $(RK_CFLAGS) $(RK_SRC)

clean :
	rm -f *.o
	rm -f *.out *.bin
	rm -f *.tmp
